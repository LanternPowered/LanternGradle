/*
 * This file is part of LanternGradle, licensed under the MIT License (MIT).
 *
 * Copyright (c) LanternPowered <https://www.lanternpowered.org>
 * Copyright (c) contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the Software), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, andor sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.lanternpowered.gradle.runconfigs

import org.gradle.api.NamedDomainObjectContainer
import org.gradle.api.execution.TaskExecutionGraph
import org.gradle.plugins.ide.idea.model.IdeaModel

class GenIntelliJRunConfigsTask extends GenRunConfigsTaskBase {

    /**
     * Whether the task should be executed.
     */
    private boolean shouldExecute = true

    /**
     * Whether to throw en exception if the project files couldn't be found
     */
    private boolean throwErrorOnFail = true

    GenIntelliJRunConfigsTask() {
        project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
            if (graph.hasTask('idea') || graph.hasTask('ideaWorkspace')) {
                this.shouldExecute = false

                // We will apply the project files while the idea project generation
                // Generate application setups
                project.tasks.ideaWorkspace.workspace.iws.withXml { provider ->
                    this.applyTo(this.configs, (Node) provider.asNode())
                }
            }
            if (this.name == RunConfigurationPlugin.TASK_IDEA_NAME &&
                    graph.hasTask(RunConfigurationPlugin.TASK_BASE_NAME)) {
                this.throwErrorOnFail = false
            }
        }
    }

    @Override
    protected List<RunConfiguration> getConfigs() {
        List<RunConfiguration> configurations = []
        configurations.addAll((project.extensions.getByName(RunConfigurationPlugin.EXTENSION_BASE_NAME)
                as NamedDomainObjectContainer).asMap.values())
        configurations.addAll((project.extensions.getByName(RunConfigurationPlugin.EXTENSION_IDEA_NAME)
                as NamedDomainObjectContainer).asMap.values())
        return configurations
    }

    @Override
    protected void generateRunConfig(List<RunConfiguration> configs) {
        def flag = false

        // Apply to configurations first to the project files
        // generated by the gradle plugin

        if (this.shouldExecute) {
            def ideaModel = project.rootProject.getExtensions().getByName("idea") as IdeaModel
            def file = ideaModel.project.outputFile

            // Try project file name first
            def workspaceFile = new File(file.parent, file.name.replaceAll("\\.ipr\$", "") + '.iws')

            // Then module file name
            if (!workspaceFile.exists()) {
                file = ideaModel.module.outputFile
                workspaceFile = new File(file.parent, file.name.replaceAll("\\.iml\$", "") + '.iws')
            }

            // Search for .iws file
            if (!workspaceFile.exists()) {
                def files = file.parentFile.listFiles({ dir, name -> file.parentFile == dir && name.endsWith(".iws") } as FilenameFilter)
                if (files.length != 0) {
                    workspaceFile = files[0]
                }
            }

            if (workspaceFile.exists()) {
                applyToFile(configs, workspaceFile)
                flag = true
            }
        }

        // Now try to apply the changes to the project files
        // generated by the ide gradle plugin

        def workspaceFile = new File('.idea/workspace.xml')
        if (workspaceFile.exists()) {
            applyToFile(configs, workspaceFile)
            flag = true
        }

        if (!flag) {
            if (this.throwErrorOnFail) {
                throw new IllegalStateException('The idea project files must be generated before this task can be run.')
            } else {
                println 'The IntelliJ project files must be generated before you generate run configs for it. ' +
                        '(Ignore this if you aren\'t going to use IntelliJ.)'
            }
        }
    }

    private void applyToFile(List<RunConfiguration> configs, File file) {
        def xmlParser = new XmlParser()
        def node = xmlParser.parse(file)

        this.applyTo(configs, node)

        def os = new FileOutputStream(file)
        try {
            def printer = new XmlNodePrinter(new PrintWriter(new BufferedWriter(new OutputStreamWriter(os))))
            printer.print(node)
        } finally {
            os.flush()
            os.close()
        }
    }

    private void applyTo(List<RunConfiguration> configs, Node node) {
        // Get the run manager node, this will contain the configuration
        node = node.component.find { it.@name == 'RunManager' } as Node

        // It should always be present
        if (node == null) {
            throw new IllegalStateException('Unable to find the RunManager node,' +
                    ' please try to regenerate the intellij project files to resolve this issue.')
        }

        configs.each {
            def appName = it.name

            // Find the custom app node
            Node customNode = (Node) node.find { it.@type == 'Application' && it.@name == appName }
            if (customNode != null) {
                node.remove(customNode)
            }

            def sourceSet
            if (it.targetSourceSet != null) {
                sourceSet = it.targetSourceSet.name
            } else {
                sourceSet = 'main'
            }

            customNode = new Node(null, 'configuration',
                    [default: 'false', name: appName, type: 'Application', factoryName: 'Application'])
            customNode.append(new Node(null, 'extension',
                    [name: 'coverage', enabled: 'false', merge: 'false', sample_coverage: 'true', runner: 'idea']))
            customNode.append(new Node(null, 'option',
                    [name: 'MAIN_CLASS_NAME', value: it.mainClass]))
            customNode.append(new Node(null, 'option',
                    [name: 'VM_PARAMETERS', value: it.vmOptions ?: '']))
            customNode.append(new Node(null, 'option',
                    [name: 'PROGRAM_PARAMETERS', value: it.programArguments ?: '']))
            def workDirPath = getWorkDirPath(it.workingDirectory)
            // Try to relativize against the root project dir, if possible, otherwise use the absolute path
            def workDir
            try {
                workDir = project.rootProject.projectDir.toPath().relativize(workDirPath).toFile().getPath()
                workDir = '$PROJECT_DIR$' + (workDir.isEmpty() ? '' : '/' + workDir)
            } catch (IllegalArgumentException ignored) {
                workDir = workDirPath.toFile().getPath()
            }
            workDir = 'file://' + workDir
            customNode.append(new Node(null, 'option',
                    [name: 'WORKING_DIRECTORY', value: workDir]))
            customNode.append(new Node(null, 'option',
                    [name: 'ALTERNATIVE_JRE_PATH_ENABLED', value: 'false']))
            customNode.append(new Node(null, 'option',
                    [name: 'ALTERNATIVE_JRE_PATH']))
            customNode.append(new Node(null, 'option',
                    [name: 'ENABLE_SWING_INSPECTOR', value: 'false']))
            customNode.append(new Node(null, 'option',
                    [name: 'ENV_VARIABLES']))
            customNode.append(new Node(null, 'option',
                    [name: 'PASS_PARENT_ENVS', value: 'true']))
            customNode.append(new Node(null, 'module',
                    [name: "${project.name}_${sourceSet}"]))
            Node envsNode = new Node(null, 'envs')
            it.environmentVariables.each { key, value ->
                envsNode.append(new Node(null, 'env', [name: key, value: value]))
            }
            customNode.append(envsNode)
            customNode.append(new Node(null, 'method'))

            node.append(customNode)
        }
    }
}
